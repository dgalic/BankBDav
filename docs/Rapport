Bases de données avancées  : 


rapport de projet par David Galichet et Nicolas Cailloux


I - Diagramme



II - Schéma relationnel



III - Règles de gestion


Chaque jour, on doit vérifier : 
-si un virement doit être fait,
 -si un paiement différé doit être débité,
 -si il est temps de payer sa cotisation de carte de paiement,
 -si on rejoint une nouvelle semaine, les montants hebdomadaires sont remis à 0,
 -si il est temps de rémunérer le compte d'un client
 -si ça fait 5 ans qu'un client est interdit bancaire : on lève l'interdit
 -si quelqu'un est a découvert, on retire les indemnités journalières.

-on doit pouvoir négocier avec son banquier des modifications du compte.
-on doit pouvoir commander des cartes/chéquiers, en vérifiant les interdictions bancaires. 
-on doit pouvoir déposer de l'argent sur un compte : cela peut lever un interdit bancaire (si il n'est interdit dans aucune autre banque).
-on doit pouvoir retirer de l'argent, via une carte de retrait : vérifier les montants, soldes et découverts
-on doit pouvoir faire des chèques.
-une banque peut vouloir modifier ses paramètres par défaut.

pour les virements : 
-on doit aussi vérifier que (solde+decouvert autorisé) > (montant+cout_initial)
-à chaque fois qu'un virement périodique est fait, il faut vérifier le découvert. si c'est interdit, on ne le fait pas, et on ne l'ajoute pas dans l'historique. 


Le temps : 
La table temps fait office de calendrier. c’est simplement un entier qu’on incrémente chaque jour. Toute modification manuelle est interdite et déclenche un trigger d’avertissement. La bonne méthode pour modifier le temps est d‘utiliser la fonction passe_jours(n) pour faire passer n jours.
Cette fonction déclenche les vérifications des évènements temporels, tels que plan_virements (qui vérifie si le jour courant, on doit effectuer des virements périodiques). 


IV - Mode d’emploi


-Il faut commencer par créer des banques : 
creation banque(nom, liste des éléments par défaut);
les éléments par défaut sont, à la suite : seuil_remunération, période_rémunération, taux_remuneration, decouvert_autorisé, taux_decouvert, agios, (carte) montant maximum par jour pour la banque, montante hebdomadaire maximum par banque, protection anti_decouvert, portee de la carte, cout de la carte de paiement, montant max par opération chez les autres banques, montant hebdomadaire max chez les autres banques.

-Pour créer une compte, utiliser :
ouverture_compte(Nom, Prenom, Banque);
(la personne doit exister dans la table personne).
-Quelques fonctions vous demandent de connaitre votre id_compte_personne, consultable avec : 
to_compte_personne(id_client, id_compte, id_banque);

-On dépot de l’argent dessus avec la fonction :
depot(compte_personne, montant, moyen de paiement)
avec moyen_de_paiement : ‘especes’ ou ‘cheque' ou ‘carte’.
-ou, dans le cas de chèque, spécifiquement : 
depot_cheque(compte_personne_crediteur, montant, compte_personne, debiteur).

-De même, le retrait se fait avec : 
retrait(compte_personne, montant, type de retrait);

-On peut consulter le solde d’un compte avec : 
consultation_solde(nom, prenom);

-Pour savoir si quelqu’un est interdit bancaire : 
is_interdit_bancaire()

-La liste des opérations est donnée par : 
consultation_historique()

-On peut fermer un compte dont le solde est 0 avec : 
fermeture_compte(id_personne, id_banque, id_compte);

-Vous avez vu qu’on peut avoir besoin de retrouver les informations liées à un compte_personne : 
from_compte_personne(id_compte_personne) qui renvoie l’id_personne, l’id_banque, et l’id_compte.

-On fait une virement unitaire entre deux comptes avec :
virement_unitaire(compte_personne debiteur, compte_personne crediteur, montant)
-Les virements périodiques, eux, sont gérés par : 
virement_périodique(compte_personne debiteur, compte_personne crediteur, montant, cout_initial, intervalle, cout périodique, délai);
si délai est NULL, c’est mis au jour courant +1, sinon ça dit dans combien de temps commencent les virements. comme tous nos mois font 30 jours, cela suffit pour avoir un virement au jour du mois près. 
Et intervalle doit être 1, 3, 6 ou 12. Si intervalle vaut 0, cela indique un virement unique.

-Pour faire passer un jour, utiliser la fonction : 
passe_jours(n integer) qui fait passer n jours.

-On peut commander une carte de credit liée à un compte : 
carte_credit(client, banque, compte);
-et ajouter de l’argent dessus, puisé dans le compte : 
ajoute_revolving(client, carte, montant);

V - Exemples

Quelques tests à faire : 
Le client 1 possède le compte 0 chez la banque 4. Le id_compte_personne lié est 3.
De base, ce compte a un solde de 3000.

Créez une carte de crédit : 
carte_credit(1,4,0);
Celà crée la carte n°1 liée au compte cité.
Et ajoutez du solde dessus : 
ajoute_revolving(1, 1, 200);
Le crédit de la carte augmente, celui du compte diminue. 
Tentez d’ajouter beaucoup d’argent : 
ajoute_revolving(1,1, 99999);
Constatez que c’est impossible car aucun découvert ou dépassement de découvert n’est autorisé.

Déposons un peu d’espèces : 
depot(3, 300, ‘especes’);
Retirons-en :
retrait(3, 100, ‘especes’);

essayons un virement, au compte 4, qui appartient à TOM Cruise : 
consultation_solde(‘Cruise’, TOM’);
virement_unitaire(3, 4, montant, cout voulu);
consultation_solde(‘Cruise’, TOM’);

Un virement périodique ?
virement_periodique(3, 4, 100, 7, 6, 2, NULL);
pour un virement de 100 tous les 6 mois à compter de demain, le cout initial étant 7 et le cout périodique étant 2.
note : l’intervalle doit être 1, 3, 6 ou 12. 0 est accepté, et indique en fait un virement unique.



